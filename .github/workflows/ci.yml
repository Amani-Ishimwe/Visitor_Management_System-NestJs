name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: |
        if [ -f "pnpm-lock.yaml" ]; then
          pnpm install --frozen-lockfile
        else
          pnpm install
        fi

    - name: Generate Prisma client
      run: pnpm prisma generate

    - name: Run database migrations
      run: pnpm prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vms_test

    - name: Run linting
      run: pnpm run lint

    - name: Run tests
      run: pnpm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vms_test
        JWT_SECRET: test-jwt-secret
        CLOUDINARY_CLOUD_NAME: test
        CLOUDINARY_API_KEY: test
        CLOUDINARY_API_SECRET: test
        EMAIL_HOST: smtp.gmail.com
        EMAIL_PORT: 587
        EMAIL_USER: test@example.com
        EMAIL_PASS: test

    - name: Run E2E tests
      run: pnpm run test:e2e
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vms_test
        JWT_SECRET: test-jwt-secret
        CLOUDINARY_CLOUD_NAME: test
        CLOUDINARY_API_KEY: test
        CLOUDINARY_API_SECRET: test
        EMAIL_HOST: smtp.gmail.com
        EMAIL_PORT: 587
        EMAIL_USER: test@example.com
        EMAIL_PASS: test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: |
        if [ -f "pnpm-lock.yaml" ]; then
          pnpm install --frozen-lockfile
        else
          pnpm install
        fi

    - name: Generate Prisma client
      run: pnpm prisma generate

    - name: Build application
      run: pnpm run build

    - name: Build Docker image
      run: docker build -t vms-backend:${{ github.sha }} .

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      run: |
        docker tag vms-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/vms-backend:${{ github.sha }}
        docker tag vms-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/vms-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/vms-backend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/vms-backend:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment logic here
        # This could be deploying to AWS, GCP, Azure, or any other cloud provider 
