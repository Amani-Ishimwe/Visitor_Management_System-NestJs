// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  RECEPTIONIST
}

enum VisitStatus {
  ACTIVE
  CHECKED_OUT
  CANCELLED
}

model Visitor {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String   @unique
  createdAt DateTime @default(now())

  visits Visit[]
}

model Visit {
  id           String      @id @default(uuid())
  visitorId    String
  departmentId String
  purpose      String
  visitDate    DateTime    @default(now())
  entryTime    DateTime?
  exitTime     DateTime?
  status       VisitStatus @default(ACTIVE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  visitor    Visitor    @relation(fields: [visitorId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@index([visitDate])
  @@index([status])
}

model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  email       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  visits Visit[]
  users  User[]

  @@index([name])
}

model User {
  id           String      @id @default(uuid())
  firstName    String
  lastName     String
  email        String      @unique
  password     String
  role         Role
  profile      String      @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQGDvVMnDeGLpVz-3WeVLdCxiYCU3-4MKt1RaTS2t_YTA&s")
  departmentId String? //optional to receptionists
  department   Department? @relation(fields: [departmentId], references: [id])
  verified     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([email])
}

model OTP {
  id        Int      @id @default(autoincrement())
  otp       String
  email     String
  createdAt DateTime @default(now())

  @@map("otp")
}
