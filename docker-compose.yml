services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vms-postgres
    environment:
      POSTGRES_DB: vms_db
      POSTGRES_USER: vms_user
      POSTGRES_PASSWORD: vms_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - vms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vms_user -d vms_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # VMS Backend Application
  vms-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vms-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_NAME:-}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_SECRET_KEY:-}
      EMAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${SMTP_USERNAME:-}
      EMAIL_PASS: ${SMTP_PASSWORD:-}
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - vms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

networks:
  vms-network:
